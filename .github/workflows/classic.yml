name: Create Issue and Assign to Project

on:
  # You can trigger this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      issue_title:
        description: 'Issue title'
        required: true
      issue_body:
        description: 'Issue body'
        required: true
      issue_labels:
        description: 'Issue labels (comma-separated)'
        required: false
  # Or you can set up other triggers
  # For example, to run on push to main branch:
  # push:
  #   branches: [ main ]

jobs:
  create-issue-and-assign-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Create Issue
        id: create-issue
        uses: actions/github-script@v6
        env:
          REPO_OWNER: $llmartella # Default to current repo owner
          REPO_NAME: $alletram # Default to current repo name
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Use the repository where the workflow is running by default
            // You can override these values in repository secrets or directly here
            const owner = process.env.REPO_OWNER || context.repo.owner;
            const repo = process.env.REPO_NAME || context.repo.repo;
            
            console.log(`Creating issue in ${owner}/${repo}`);
            
            const { data: issue } = await github.rest.issues.create({
              owner: owner,
              repo: repo,
              title: '${{ github.event.inputs.issue_title || 'Automated Issue' }}',
              body: '${{ github.event.inputs.issue_body || 'This issue was automatically created by the GitHub Action workflow.' }}',
              labels: '${{ github.event.inputs.issue_labels }}'.split(',').filter(Boolean)
            });
            console.log(`Created issue #${issue.number}: ${issue.title}`);
            return { issue_number: issue.number, issue_id: issue.node_id };

      - name: Add Issue to Project
        uses: actions/github-script@v6
        env:
          ISSUE_ID: ${{ fromJSON(steps.create-issue.outputs.result).issue_id }}
          PROJECT_ID: 'VT_kwHODDdG4s4A194P' # Replace with your project ID
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN_1 }} # Personal access token with project permissions
          script: |
            // Get project ID from environment variable
            const projectId = process.env.PROJECT_ID;
            const issueId = process.env.ISSUE_ID;
            
            // GraphQL mutation to add the issue to the project
            const addToProjectMutation = `
              mutation {
                addProjectV2ItemById(input: {
                  projectId: "${projectId}"
                  contentId: "${issueId}"
                }) {
                  item {
                    id
                  }
                }
              }
            `;
            
            try {
              const result = await github.graphql(addToProjectMutation);
              console.log('Issue added to project successfully');
              console.log(result);
            } catch (error) {
              console.log('Error adding issue to project:');
              console.log(error);
              core.setFailed(error.message);
            }
