name: Create Monthly Task

on:
  schedule:
    - cron: '0 12 1-7 * *' # Runs at 12:00 PM UTC on the first Saturday of every month
  workflow_dispatch:

permissions:
  issues: write
  contents: read


jobs:
  create-task:
    runs-on: ubuntu-latest

    steps:
      - name: Create an issue and assign it to a project
        uses: actions/github-script@v6
        with:
          script: |
            const monthNames = [
              "January", "February", "March", "April", "May", "June",
              "July", "August", "September", "October", "November", "December"
            ];
            const currentMonth = monthNames[new Date().getUTCMonth()]; // Get the current month name

            // Step 1: Create the issue
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `CPF F*$ this Task for ${currentMonth}`,
              body: `
              ### Tasks for ${currentMonth}
              - [ ] Task 1: Review the monthly report
              - [ ] Task 2: Update project documentation
              - [ ] Task 3: Conduct team meeting
              - [ ] Task 4: Plan for next month
                            `,
              assignees: ["llmartella"], // Replace with the GitHub username
              labels: ["agvend"], // Replace with your desired label
            });

            console.log("Created issue:", issue);

            // Step 2: Add the issue to a GitHub Project (v2) using GraphQL
            const projectId = "PVT_kwHODDdG4s4A194P"; // Replace with your project ID
            const statusFieldId = "PVTSSF_lAHODDdG4s4A194PzgrWgVQ"; // Replace with your project's Status field ID
            const statusValueId = "61e4505c"; // Replace with the desired Status value ID (e.g., "To Do")

            const mutation = `
              mutation($projectId: ID!, $contentId: ID!, $statusFieldId: ID!, $statusValueId: String!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item {
                    id
                  }
                }
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $contentId,
                  fieldId: $statusFieldId,
                  value: { singleSelectOptionId: $statusValueId }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;

            const variables = {
              projectId: projectId,
              contentId: issue.node_id, // Use the issue's node_id for GraphQL
              statusFieldId: statusFieldId,
              statusValueId: statusValueId,
            };

            const result = await github.graphql(mutation, variables);
            console.log("Issue added to project and status updated:", result);

            try {
            const result = await github.graphql(mutation, variables);
            console.log("Issue added to project and status updated:", result);
            } catch (error) {
              console.error("GraphQL Error:", error);
            }

            console.log("Project ID:", projectId);
            console.log("Status Field ID:", statusFieldId);
            console.log("Status Value ID:", statusValueId);
            console.log("Content ID (node_id):", issue.node_id);
